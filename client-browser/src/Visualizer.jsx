import React from 'react';
import ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';

// Sample JSON data (replace this with your actual data)
const modelData = [
    [
      {
        "weights": [],
        "bias": 0.5781908326993854
      },
      {
        "weights": [],
        "bias": 0.787065954752254
      }
    ],
    [
      {
        "weights": [
          15.34191542115394,
          27.20133691304522
        ],
        "bias": -10.999284316185244
      },
      {
        "weights": [
          -38.774936389753634,
          -0.005971693999091959
        ],
        "bias": 3.409908463270457
      },
      {
        "weights": [
          13.486489595992213,
          -2.2348854882383375
        ],
        "bias": 23.856378820149942
      },
      {
        "weights": [
          14.964637214669995,
          26.777543225515235
        ],
        "bias": -10.911946058717218
      },
      {
        "weights": [
          29.294193228648147,
          21.936056556746973
        ],
        "bias": -11.670733888121507
      },
      {
        "weights": [
          -37.32971282480471,
          4.509619595143261
        ],
        "bias": 3.3323612203796746
      },
      {
        "weights": [
          -47.58771512355118,
          0.03453090572990489
        ],
        "bias": 5.074487677527663
      },
      {
        "weights": [
          -34.526993642091874,
          3.361015715613586
        ],
        "bias": 4.054636424062654
      },
      {
        "weights": [
          -36.71326681335865,
          3.240178235596189
        ],
        "bias": 3.1532414853472175
      },
      {
        "weights": [
          29.663617739948126,
          22.1022883533941
        ],
        "bias": -11.401960770992618
      }
    ],
    [
      {
        "weights": [
          -38.31664934747335,
          -33.31452406662515,
          11.435825911985816,
          -39.567248021149894,
          -33.70133079144647,
          -31.324602529399645,
          -41.94056701798499,
          -28.56603864321628,
          -31.754751223812622,
          -34.43639517999925
        ],
        "bias": 1.8787573869165621
      },
      {
        "weights": [
          17.034342857830985,
          2.6103658911135845,
          -57.607163888867035,
          20.122465140856374,
          17.129980488228284,
          -1.6505949786139076,
          3.847785205974857,
          -4.965138907865389,
          -0.609815260637271,
          15.48090271855354
        ],
        "bias": -49.20366654543303
      },
      {
        "weights": [
          -44.779012158700795,
          -36.038193767006796,
          13.716968203013998,
          -46.312445513163325,
          -39.58886858193188,
          -33.63866877086636,
          -46.432782816774505,
          -30.39249123461541,
          -33.88363006259271,
          -39.4846998172553
        ],
        "bias": 2.413109091452137
      },
      {
        "weights": [
          -41.77794410060763,
          -34.758158655972274,
          12.600391181231888,
          -42.83288238048607,
          -36.73463046077777,
          -32.31654864692554,
          -44.43810711358943,
          -29.277742499948367,
          -32.770966229872265,
          -36.94419139404022
        ],
        "bias": 2.2010496690286687
      },
      {
        "weights": [
          -41.01532955309316,
          -34.49152773699872,
          12.41883590445168,
          -42.49080500603996,
          -36.27447115124815,
          -32.43862073763672,
          -44.13217658617711,
          -29.249328482577663,
          -32.586864598324006,
          -36.6801785742429
        ],
        "bias": 2.4251872621359363
      },
      {
        "weights": [
          -51.18534485303734,
          -38.895942344553156,
          15.794493311334467,
          -53.13276604695889,
          -45.75912119365792,
          -36.46029042925768,
          -50.7302538531517,
          -32.65667144154016,
          -37.088994239839685,
          -44.023785983846125
        ],
        "bias": 3.738087458525594
      },
      {
        "weights": [
          -44.77887558759806,
          -35.89179153309878,
          13.635774798292966,
          -46.33562294065576,
          -39.38877319939581,
          -33.387065988865736,
          -46.52703200204847,
          -30.12589549212205,
          -33.92350016170981,
          -39.214202321222984
        ],
        "bias": 2.3986864539160395
      },
      {
        "weights": [
          -47.79173977079292,
          -37.87004109424077,
          14.520776856441163,
          -49.09346947109704,
          -41.595826265889784,
          -34.67155006112028,
          -48.17443975234314,
          -31.315723930452467,
          -35.167258032461405,
          -41.303136317928235
        ],
        "bias": 2.730177569491706
      },
      {
        "weights": [
          -46.47531219532535,
          -36.607613555642985,
          14.156773256749966,
          -48.04794716264045,
          -40.87549441523681,
          -33.8702593017621,
          -47.405780581153856,
          -30.762879052181543,
          -34.49106066237806,
          -40.38742202825465
        ],
        "bias": 3.1045120949753215
      },
      {
        "weights": [
          -46.83969378823015,
          -37.07163683607148,
          14.19762525683869,
          -47.92570860073029,
          -40.79397676487382,
          -34.220589235198055,
          -47.5571721438869,
          -31.320842573025978,
          -34.756057462316456,
          -40.56734200849358
        ],
        "bias": 2.597039027372327
      }
    ],
    [
      {
        "weights": [
          16.9035709158071,
          -23.646900776670087,
          17.062135933653085,
          17.170235294789688,
          16.91934047348251,
          16.914843573371,
          17.131489389497855,
          16.785813968162273,
          17.124258479641,
          16.741591687538428
        ],
        "bias": 1.0818403979346816
      }
    ]
  ];

const createNode = (id, label, position) => ({
  id,
  type: 'default',
  data: { label },
  position,
});

const createEdge = (source, target, weight) => ({
  id: `edge-${source}-${target}`,
  source,
  target,
  animated: true,
  style: { strokeWidth: weight * 0.05 },
});

const NeuralNetworkVisualizer = () => {
  // Generate nodes and edges from modelData
  const nodes = [];
  const edges = [];
  const nodeRadius = 20;
  const nodeSpacing = 100;
  const layerSpacing = 200;

  modelData.forEach((layer, layerIndex) => {
    layer.forEach((neuron, neuronIndex) => {
      const x = 100 + layerIndex * layerSpacing;
      const y = neuronIndex * nodeSpacing;

      nodes.push(createNode(`node-${layerIndex}-${neuronIndex}`, `Bias: ${neuron.bias.toFixed(2)}`, { x, y }));

      if (layerIndex > 0) {
        modelData[layerIndex - 1].forEach((prevNeuron, prevNeuronIndex) => {
          edges.push(createEdge(`node-${layerIndex - 1}-${prevNeuronIndex}`, `node-${layerIndex}-${neuronIndex}`, Math.abs(neuron.weights[prevNeuronIndex])));
        });
      }
    });
  });

  return (
    <div style={{ height: '100vh' }}>
      <ReactFlow nodes={nodes} edges={edges} fitView>
        <MiniMap />
        <Controls />
        <Background />
      </ReactFlow>
    </div>
  );
};

export default NeuralNetworkVisualizer;

